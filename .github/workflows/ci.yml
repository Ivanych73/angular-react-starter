name: angular test and build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  get_init_values:
    runs-on: ubuntu-latest
    outputs:
      start_time: ${{steps.start_time.outputs.start_time}}
      node_version: ${{steps.node_version.outputs.node_version}}
    steps:
    - name: Get start time
      id: start_time
      run: echo "::set-output name=start_time::$(date +%s)"

    - name: Checkout
      uses: actions/checkout@v3

    - name: Get Node version
      id: node_version
      run: |
        # If node version is mentioned in engines section of package.json, use this value
        # Otherwise use latest
        version=$(awk '/"node"/{gsub(/("|",)/,"",$2);print $2}' angular/package.json)
        if [[ -z "$version" ]]
        then
          version="*"
        fi
        echo "::set-output name=node_version::${version}"
      shell: bash

  test_and_build:
    runs-on: ubuntu-latest
    needs: get_init_values
    defaults:
      run:
        working-directory: './angular/'

    steps:

    - uses: actions/checkout@v3

    - name: Setup node
      uses: actions/setup-node@v3
      with:
        node-version: ${{needs.get_init_values.outputs.node_version}}
        cache: 'npm'
        cache-dependency-path: './angular/package-lock.json'
    
    - name: Install dependencies
      run: npm ci

    - name: Run tests
      id: run_tests
      run: npm run test -- --no-watch --no-progress --browsers=ChromeHeadless

    - name: Set run tests as failed step
      if: failure() && steps.run_tests.outcome == 'failure'
      run: echo "FAILED_STEP=running tests" >> $GITHUB_ENV

    - name: Run build
      id: run_build
      run: npm run build

    - name: Set run build as failed step
      if: failure() && steps.run_build.outcome == 'failure'
      run: echo "FAILED_STEP=running build" >> $GITHUB_ENV

    - name: Log in to the Container registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/${{ github.repository }}/angular-demo
        # Tag image with commit ID
        tags: |
          type=raw,value=${{GITHUB.SHA}}
          type=raw,value=latest

    - name: Build and push Docker image
      id: build_push_docker
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Set build and push as failed step
      if: failure() && steps.build_push_docker.outcome == 'failure'
      run: echo "FAILED_STEP=build and push docker image" >> $GITHUB_ENV

    - name: Send email on failure
      if: failure()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: ${{secrets.MAIL_SMTP_SERVER}}
        server_port: 465
        username: ${{secrets.MAIL_USERNAME}}
        password: ${{secrets.MAIL_PASSWORD}}
        subject:  ${{env.FAILED_STEP}} in ${{ github.job }} job of ${{ github.repository }} failed!
        to: ${{secrets.MAIL_USERNAME}}
        from: ${{secrets.MAIL_FROM_FIELD}}
        secure: true
        body: ${{env.FAILED_STEP}} in ${{ github.job }} job of ${{ github.repository }} failed!

    - name: Get duration
      id: duration
      run: |
        start=${{needs.get_init_values.outputs.start_time}}
        finish=$(date +%s)
        duration=$(($finish-$start))
        readble_duration="$(date -d@$duration -u +%H) h $(date -d@$duration -u +%M) min $(date -d@$duration -u +%S) sec"
        echo "::set-output name=duration::$readble_duration"
      shell: bash

    - name: Send email on success
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: ${{secrets.MAIL_SMTP_SERVER}}
        server_port: 465
        username: ${{secrets.MAIL_USERNAME}}
        password: ${{secrets.MAIL_PASSWORD}}
        subject: ${{ github.job }} job of ${{ github.repository }} succeeded!
        to: ${{secrets.MAIL_USERNAME}}
        from: ${{secrets.MAIL_FROM_FIELD}}
        secure: true
        body: ${{ github.job }} job of ${{ github.repository }} succeeded! Total duration took ${{steps.duration.outputs.duration}}